name: Update README with Google Scholar Publications

on:
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:  # Allows manual trigger

jobs:
  update-readme:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch Publications from Google Scholar
        env:
          SCHOLAR_QUERY: "Kritshekhar+Jha"
        run: |
          echo "Fetching Google Scholar publications for $SCHOLAR_QUERY"

          # Fetch Google Scholar results using SerpAPI
          SCHOLAR_API_KEY=${{ secrets.SCHOLAR_API_KEY }}
          API_URL="https://serpapi.com/search.json?engine=google_scholar&q=$SCHOLAR_QUERY&api_key=$SCHOLAR_API_KEY"

          PUBLISH_LIST=$(curl -s "$API_URL")

          # Debugging: Print raw API response
          echo "Scholar API Response: $PUBLISH_LIST"

          # Extract publication data safely
          PUBLISH_LIST=$(echo "$PUBLISH_LIST" | jq -c 'if .organic_results then .organic_results else [] end')

          # Check if results exist
          if [[ "$PUBLISH_LIST" == "[]" ]]; then
            echo "No publications found. Exiting."
            exit 0
          fi

          # Format publication list correctly
          PUB_LIST=$(echo "$PUBLISH_LIST" | jq -r '.[] | 
            "- [" + .title + "](" + .link + ") ðŸ“„ " + .snippet')

          # Create a temporary file
          TEMP_FILE=$(mktemp)

          # Use awk to update README safely
          awk -v pubs="$PUB_LIST" '
              BEGIN { print_mode=1 }
              /<!-- PUBLICATION START -->/ { print; print "**Recent Publications:**"; print pubs; print_mode=0; next }
              /<!-- PUBLICATION END -->/ { print_mode=1 }
              print_mode' README.md > "$TEMP_FILE"

          # Move the temp file back to README.md
          mv "$TEMP_FILE" README.md

      - name: Commit and push changes
        env:
          PAT_TOKEN: ${{ secrets.SCHOLAR_TOKEN }}
          USERNAME: ${{ github.repository_owner }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git remote remove origin
          git remote add origin https://${USERNAME}:${PAT_TOKEN}@github.com/${{ github.repository }}.git
          git commit -am "Updated recent publications" || echo "No changes to commit"
          git push origin main --force
